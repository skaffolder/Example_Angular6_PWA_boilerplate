**** PROPERTIES SKAFFOLDER ****
{
    "forEachObj": "resource",
    "overwrite": true,
    "_partials": []
}
**** END PROPERTIES SKAFFOLDER ****
/**
 * 
 * 
  _____                      _              _ _ _     _   _     _        __ _ _      
 |  __ \                    | |            | (_) |   | | | |   (_)      / _(_) |     
 | |  | | ___    _ __   ___ | |_    ___  __| |_| |_  | |_| |__  _ ___  | |_ _| | ___ 
 | |  | |/ _ \  | '_ \ / _ \| __|  / _ \/ _` | | __| | __| '_ \| / __| |  _| | |/ _ \
 | |__| | (_) | | | | | (_) | |_  |  __/ (_| | | |_  | |_| | | | \__ \ | | | | |  __/
 |_____/ \___/  |_| |_|\___/ \__|  \___|\__,_|_|\__|  \__|_| |_|_|___/ |_| |_|_|\___|
 
 * DO NOT EDIT THIS FILE!! 
 * 
 *  TO CUSTOMIZE {{resource.name}}.js PLEASE EDIT ../custom/{{resource._entity.name}}Custom.js
 * 
 *  -- THIS FILE WILL BE OVERWRITTEN ON THE NEXT SKAFFOLDER'S CODE GENERATION --
 * 
 */
const app = require('../../app.js');
const db_{{db.name}} = require('../../db/{{db.name}}_schema.js')
const properties = require('../../properties.js');
const handleError = require('../../security/util.js').handleError;
require('./custom/{{resource.name}}Custom.js');

{{#notNull resource._entity}}
/*
 * SCHEMA DB {{resource._entity.name}}
 * 
	{
		{{#each resource._entity._attrs}}
		{{name}}: {
			type: '{{type}}'{{#required}}, 
			required : true{{/required}}{{#unique}},
			unique : true, {{/unique}}{{#if _enum}},
			enum : {{#joinObj _enum 'name'}}{{/joinObj}}{{/if}}
		},
		{{/each}}
		//RELATIONS
		{{#each resource._relations}}
			{{#equal _ent1.name ../name}}
		{{name}}: {{#equal type 'm:m'}}[{{/equal}}{
			type: Schema.ObjectId{{#required}}, 
			required : true{{/required}},
			ref : "{{_ent2.name}}"
		}{{#equal type 'm:m'}}]{{/equal}},
			{{/equal}}
		{{/each}}
		
		
		//EXTERNAL RELATIONS
		
		{{#each resource._relations}}
			{{#notEqual _ent1.name ../name}}
		{{name}}: {{#equal type 'm:m'}}[{{/equal}}{
			type: Schema.ObjectId{{#required}},
			required : true{{/required}},
			ref : "{{_ent1.name}}"
		}{{#equal type 'm:m'}}]{{/equal}},
			{{/notEqual}}
		{{/each}}
		
	}
 * 
 */



//CRUD METHODS

{{#each resource._services}}
	{{#equal crudAction 'list'}}

/**
 * {{../resource.name}}Service.{{name}}{{#notEmpty description}}
 *   @description {{description}}{{/notEmpty}}{{#each _params}}
 *   @param {{type}} {{name}}{{#notEmpty description}} {{description}}{{/notEmpty}}{{/each}}{{#notEmpty returnType}}
 *   @returns {{returnType}}{{/notEmpty}}
 *
 */
app.get(properties.api + '{{../resource.url}}{{#editUrlParam url}}{{/editUrlParam}}', function (req, res) {
	db_{{../db.name}}.{{../resource._entity.name}}.find().exec(function (err, list) {
		if (err) return handleError(err, res);
		res.send(list);
	});
});
	{{/equal}}
	{{#equal crudAction 'get'}}

/**
 * {{../resource.name}}Service.{{name}}{{#notEmpty description}}
 *   @description {{description}}{{/notEmpty}}{{#each _params}}
 *   @param {{type}} {{name}}{{#notEmpty description}} {{description}}{{/notEmpty}}{{/each}}{{#notEmpty returnType}}
 *   @returns {{returnType}}{{/notEmpty}}
 *
 */
app.get(properties.api + '{{../resource.url}}{{#editUrlParam url}}{{/editUrlParam}}', function (req, res) {
	db_{{../db.name}}.{{../resource._entity.name}}.findOne({_id:req.params.id}).exec(function (err, obj) {
		if (err) return handleError(err, res);
		res.send(obj);
	});
});
	{{/equal}}
	{{#equal crudAction 'update'}}

/**
 * {{../resource.name}}Service.{{name}}{{#notEmpty description}}
 *   @description {{description}}{{/notEmpty}}{{#each _params}}
 *   @param {{type}} {{name}}{{#notEmpty description}} {{description}}{{/notEmpty}}{{/each}}{{#notEmpty returnType}}
 *   @returns {{returnType}}{{/notEmpty}}
 *
 */
app.post(properties.api + '{{../resource.url}}{{#editUrlParam url}}{{/editUrlParam}}', function (req, res) {
	db_{{../db.name}}.{{../resource._entity.name}}.findByIdAndUpdate(req.params.id, req.body, {'new': true}, function (err, obj) {
		if (err) return handleError(err, res);
		res.send(obj);
	});
});
	{{/equal}}
	{{#equal crudAction 'delete'}}

/**
 * {{../resource.name}}Service.{{name}}{{#notEmpty description}}
 *   @description {{description}}{{/notEmpty}}{{#each _params}}
 *   @param {{type}} {{name}}{{#notEmpty description}} {{description}}{{/notEmpty}}{{/each}}{{#notEmpty returnType}}
 *   @returns {{returnType}}{{/notEmpty}}
 *
 */
app['delete'](properties.api + '{{../resource.url}}{{#editUrlParam url}}{{/editUrlParam}}', function (req, res) {
	db_{{../db.name}}.{{../resource._entity.name}}.findByIdAndRemove(req.params.id, function (err) {
		  if (err) return handleError(err, res);
		  res.send(err);
	});
});
	{{/equal}}
	{{#equal crudAction 'create'}}

/**
 * {{../resource.name}}Service.{{name}}{{#notEmpty description}}
 *   @description {{description}}{{/notEmpty}}{{#each _params}}
 *   @param {{type}} {{name}}{{#notEmpty description}} {{description}}{{/notEmpty}}{{/each}}{{#notEmpty returnType}}
 *   @returns {{returnType}}{{/notEmpty}}
 *
 */
app.post(properties.api + '{{../resource.url}}{{#editUrlParam url}}{{/editUrlParam}}', function (req, res) {
	obj = new db_{{../db.name}}.{{../resource._entity.name}}(req.body);
	obj.save(function (err) {
		if (err) return handleError(err, res);
		res.send(obj);
	});
});
	{{/equal}}
	{{#startWith crudAction 'findBy'}}

/**
 * {{../resource.name}}Service.{{name}}{{#notEmpty description}}
 *   @description {{description}}{{/notEmpty}}{{#each _params}}
 *   @param {{type}} {{name}}{{#notEmpty description}} {{description}}{{/notEmpty}}{{/each}}{{#notEmpty returnType}}
 *   @returns {{returnType}}{{/notEmpty}}
 *
 */
app.get(properties.api + '{{../resource.url}}{{#editUrlParam url}}{{/editUrlParam}}', function (req, res) {

	db_{{../db.name}}.{{../resource._entity.name}}.find({ '{{#subStr name 6 }}{{/subStr}}' : req.params.key}).exec(function (err, list) {
		if (err) return handleError(err, res);
		res.send(list);
	});
	
});
	{{/startWith}}
	{{#equal crudAction 'findBy'}}

/**
 * {{../resource.name}}Service.{{name}}{{#notEmpty description}}
 *   @description {{description}}{{/notEmpty}}{{#each _params}}
 *   @param {{type}} {{name}}{{#notEmpty description}} {{description}}{{/notEmpty}}{{/each}}{{#notEmpty returnType}}
 *   @returns {{returnType}}{{/notEmpty}}
 *
 */
app.get(properties.api + '{{../resource.url}}{{#editUrlParam url}}{{/editUrlParam}}', function (req, res) {

	var criteria = {};
	criteria[req.params.name] = req.params.key;
	
	db_{{../db.name}}.{{../resource._entity.name}}.find(criteria).exec(function (err, list) {
		if (err) return handleError(err, res);
		res.send(list);
	});
	
});
	{{/equal}}
	{{#startWith crudAction 'get'}}

/**
 * {{../resource.name}}Service.{{name}}{{#notEmpty description}}
 *   @description {{description}}{{/notEmpty}}{{#each _params}}
 *   @param {{type}} {{name}}{{#notEmpty description}} {{description}}{{/notEmpty}}{{/each}}{{#notEmpty returnType}}
 *   @returns {{returnType}}{{/notEmpty}}
 *
 */
app.get(properties.api + '{{../resource.url}}{{#editUrlParam url}}{{/editUrlParam}}', function (req, res) {

	db_{{../db.name}}.{{../resource._entity.name}}.findOne({ _id : req.params.id})
	.populate("{{#subStr name 3 }}{{/subStr}}")
	.exec(function (err, obj) {
		if (err) return handleError(err, res);
		
		if(obj)
			res.send(obj.{{#subStr name 3 }}{{/subStr}});
		else
			res.send();
	});
	
});
	{{/startWith}}
	{{#startWith crudAction 'addTo'}}

/**
 * {{../resource.name}}Service.{{name}}{{#notEmpty description}}
 *   @description {{description}}{{/notEmpty}}{{#each _params}}
 *   @param {{type}} {{name}}{{#notEmpty description}} {{description}}{{/notEmpty}}{{/each}}{{#notEmpty returnType}}
 *   @returns {{returnType}}{{/notEmpty}}
 *
 */
app.get(properties.api + '{{../resource.url}}{{#editUrlParam url}}{{/editUrlParam}}', function (req, res) {
	db_{{../db.name}}.{{../resource._entity.name}}.findByIdAndUpdate(req.params.id, {$addToSet : { '{{#subStr name 5 }}{{/subStr}}' : req.params.idRel }}, {'new': true}, function (err, doc) {
		if (err) return handleError(err, res);
		res.send(doc);
	});
});
	{{/startWith}}
	{{#startWith crudAction 'removeFrom'}}

/**
 * {{../resource.name}}Service.{{name}}{{#notEmpty description}}
 *   @description {{description}}{{/notEmpty}}{{#each _params}}
 *   @param {{type}} {{name}}{{#notEmpty description}} {{description}}{{/notEmpty}}{{/each}}{{#notEmpty returnType}}
 *   @returns {{returnType}}{{/notEmpty}}
 *
 */
app['delete'](properties.api + '{{../resource.url}}{{#editUrlParam url}}{{/editUrlParam}}', function (req, res) {
	db_{{../db.name}}.{{../resource._entity.name}}.findByIdAndUpdate(req.params.id , {$pull : { '{{#subStr name 10 }}{{/subStr}}' : req.params.idRel }}, {'new': true}, function (err, doc) {
		if (err) return handleError(err, res);
		res.send(doc);
	});
});
	{{/startWith}}
	{{#startWith crudAction 'linkTo'}}

/**
 * {{../resource.name}}Service.{{name}}{{#notEmpty description}}
 *   @description {{description}}{{/notEmpty}}{{#each _params}}
 *   @param {{type}} {{name}}{{#notEmpty description}} {{description}}{{/notEmpty}}{{/each}}{{#notEmpty returnType}}
 *   @returns {{returnType}}{{/notEmpty}}
 *
 */
app.get(properties.api + '{{../resource.url}}{{#editUrlParam url}}{{/editUrlParam}}', function (req, res) {
	db_{{../db.name}}.{{../resource._entity.name}}.findByIdAndUpdate( req.params.id , { '{{#subStr name 6 }}{{/subStr}}' : req.params.idRel }, {'new': true}, function (err, doc) {
		if (err) return handleError(err, res);
		res.send(doc);
	});
});
	{{/startWith}}
	{{#startWith crudAction 'unlinkFrom'}}

/**
 * {{../resource.name}}Service.{{name}}{{#notEmpty description}}
 *   @description {{description}}{{/notEmpty}}{{#each _params}}
 *   @param {{type}} {{name}}{{#notEmpty description}} {{description}}{{/notEmpty}}{{/each}}{{#notEmpty returnType}}
 *   @returns {{returnType}}{{/notEmpty}}
 *
 */
app['delete'](properties.api + '{{../resource.url}}{{#editUrlParam url}}{{/editUrlParam}}', function (req, res) {
	db_{{../db.name}}.{{../resource._entity.name}}.findByIdAndUpdate(req.params.id , { '{{#subStr name 10 }}{{/subStr}}' : null }, {'new': true}, function (err, doc) {
		if (err) return handleError(err, res);
		res.send(doc);
	});
});
	{{/startWith}}
	{{#startWith crudAction 'strictLinkListOf'}}

/**
 * {{../resource.name}}Service.{{name}}{{#notEmpty description}}
 *   @description {{description}}{{/notEmpty}}{{#each _params}}
 *   @param {{type}} {{name}}{{#notEmpty description}} {{description}}{{/notEmpty}}{{/each}}{{#notEmpty returnType}}
 *   @returns {{returnType}}{{/notEmpty}}
 *
 */
app.post(properties.api + '{{../resource.url}}{{#editUrlParam url}}{{/editUrlParam}}', function (req, res) {

	db_{{../db.name}}.{{../resource._entity.name}}.find({ {{#subStr name 16 }}{{/subStr}}: req.params.key }, function (err, list) {
		var listInsert = req.body.list;
		var key = req.params.key;
		db_{{../db.name}}.{{../resource._entity.name}}.update({ {{#subStr name 16 }}{{/subStr}} : key, '_id': {$nin: listInsert}}, {$pull: { '{{#subStr name 16 }}{{/subStr}}': key}}, {multi: true}, function (err) {
			if (err) return handleError(err, res);
			db_{{../db.name}}.{{../resource._entity.name}}.update({'_id': {$in: listInsert}}, {$addToSet: { '{{#subStr name 16 }}{{/subStr}}': key}}, {multi: true}, function (err) {
				if (err) return handleError(err, res);
				res.send(err);  
			});
		});
	});
	
});
	{{/startWith}}
{{/each}}{{/notNull}}

/*
 * CUSTOM SERVICES
 * 
 *	These services will be overwritten and implemented in  {{name}}Custom.js
 */

{{#each resource._services}}
{{#equal crudAction null}}

/**
 * {{../resource.name}}Service.{{name}}{{#notEmpty description}}
 *   @description {{description}}{{/notEmpty}}{{#each _params}}
 *   @param {{type}} {{name}}{{#notEmpty description}} {{description}}{{/notEmpty}}{{/each}}{{#notEmpty returnType}}
 *   @returns {{returnType}}{{/notEmpty}}
 *
 */
app['{{lowercase method}}'](properties.api + '{{../resource.url}}{{#editUrlParam url}}{{/editUrlParam}}', function (req, res) {
	res.send({});
});
		
	{{/equal}}
{{/each}}