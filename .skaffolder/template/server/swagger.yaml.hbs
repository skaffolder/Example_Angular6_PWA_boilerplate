**** PROPERTIES SKAFFOLDER ****
{
    "forEachObj": "oneTime",
    "_partials": []
}
**** END PROPERTIES SKAFFOLDER ****
openapi: 3.0.0
info:
  title: {{project.name}}
  description: You can obtain JWT token from login API
  version: 0.1
servers:
  - url: http://localhost:3000/api
    description: Local server for testing
paths:
  /login:
    post:
      summary: Login API
      security: []   # No security
      tags:
        - Security
      requestBody:
        content:
          application/json:
            schema:      # Request body contents
              type: object
              properties:
                username:
                  type: string
                password:
                  type: string
              example:   # Sample object
                username: admin
                password: 1a1dc91c907325c69271ddf0c944bc72
      responses:
        '200':
          description: OK
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
  /verifyToken:
    post:
      summary: Verify token API
      security: [] #No security
      tags:
        - Security
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                token:
                  type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
  /changePassword:
    post:
      summary: Change password API
      tags:
        - Security
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                passwordNew:
                  type: string
                passwordOld:
                  type: string
      responses:
        '200':
          description: OK
                
{{#each resources}}{{#each _resources}}
  #-----  {{name}}  -----{{#group _services by="url"}}
  {{../url}}{{value}}:
    {{#each items}}{{lowercase method}}:
      summary: {{description}}{{#isNull _roles}}
      security: []   # No security{{/isNull}}
      tags:
        - {{../../name}}{{#notEmpty _params}}
      parameters:{{#each _params}}
        - name: {{name}}
          in: path
          description: {{description}}
          required: true
          schema:
            type: {{toSwaggerType type}}{{/each}}{{/notEmpty}}
      responses:
        "200":
          description: OK{{#or (equal crudAction 'list') (startWith crudAction 'findBy') (startWith crudAction 'addTo') (startWith crudAction 'removeFrom') (startWith crudAction 'linkTo') (startWith crudAction 'unlinkFrom')}}
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/{{../../name}}"{{/or}}{{#or (equal crudAction 'get') (equal crudAction 'update') (equal crudAction 'create') }}
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/{{../../name}}"{{/or}}{{#or (equal crudAction 'update') }}
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/{{../../name}}"{{/or}}{{#or (equal crudAction 'create') }}
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:{{#each ../../_entity._attrs}}
                {{name}}:
                  type: {{toSwaggerType type}}{{/each}}{{/or}}
    {{/each}}{{/group}}{{/each}}{{/each}}
    
  #-----  User  -----
  /Users/{id}/changePassword:
    post:
      summary: Change password by admin API
      tags:
        - User
      parameters:
        - name: id
          in: path
          description: Id
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                passwordNew:
                  type: string
                passwordAdmin:
                  type: string
      responses:
        '200':
          description: OK
  /Users/{id}:
    post:
      summary: Update User API
      tags:
        - User
      parameters:
        - name: id
          in: path
          description: Id
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/User"
    delete:
      summary: Delete User API
      tags:
        - User
      parameters:
        - name: id
          in: path
          description: Id
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
  /Users:
    post:
      summary: Create User API
      tags:
        - User
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: 'string'
                password: 
                  type: 'string'
                mail: 
                  type: 'string'
                name: 
                  type: 'string'
                surname: 
                  type: 'string'
                roles: 
                  type: array
                  items:
                    type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
    
# JWT security
security:
  - bearerAuth: [] 
  
  
# Components
components:

  # Security
  securitySchemes:
    bearerAuth:            # arbitrary name for the security scheme
      type: http
      scheme: bearer
      bearerFormat: JWT    # optional, arbitrary value for documentation purposes

  # Data Model
  schemas:
    User:
      properties:
        username:
          type: 'string'
        password: 
          type: 'string'
        mail: 
          type: 'string'
        name: 
          type: 'string'
        surname: 
          type: 'string'
        roles: 
          type: array
          items:
            type: string
      required:
        - username
        - password
        
{{#each resources}}{{#each _resources}}
    {{name}}:
      properties:
        _id:
          type: string{{#each _entity._attrs}}
        {{name}}:
          type: {{toSwaggerType type}}{{/each}}
      required:
        -  _id{{#each _entity._attrs}}{{#equal required true}}
        - {{name}}{{/equal}}{{/each}}
      
    {{/each}}{{/each}}
