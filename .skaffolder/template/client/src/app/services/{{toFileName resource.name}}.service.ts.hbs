**** PROPERTIES SKAFFOLDER ****
{
    "forEachObj": "resource",
    "_partials": [
        {
            "template": "/**\n * Custom APIs\n{{#notEmpty resource}} *{{#each resource._services}}{{#equal crudAction null}}\n * {{_resource.name}}Service.{{name}}{{#notEmpty description}}\n *\t@description {{description}}{{/notEmpty}}{{#each _params}}\n *\t@param {{type}} {{name}}{{#notEmpty description}} {{description}}{{/notEmpty}}{{/each}}{{#notEmpty returnType}}\n *\t@returns {{returnType}}{{/notEmpty}}\n *{{/equal}}{{/each}}\n */{{/notEmpty}}",
            "tagTo": "// end documentation",
            "tagFrom": "// start documentation",
            "name": "Partial documentation"
        }
    ]
}
**** END PROPERTIES SKAFFOLDER ****
{{#equal resource.type 'User'}}
// DEPENDENCIES
import { Injectable } from '@angular/core';
import { HttpClient } from '@angular/common/http';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';
{{/equal}}
// BASE SERVICE
import { {{capitalize resource.name}}BaseService } from './base/{{toFileName resource.name}}.base.service';


// start documentation
// end documentation

/**
 * YOU CAN OVERRIDE HERE {{resource.name}}BaseService
 */
{{#equal resource.type 'User'}}
@Injectable()
{{/equal}}
export class {{capitalize resource.name}}Service extends {{capitalize resource.name}}BaseService {

    {{#equal resource.type 'User'}}
    // CONSTRUCTOR
    constructor(
        http: HttpClient,
    ) {
        super(http);
    }

    /*
    Name: changePassword
    Description: Change password of user from admin
    Params:
        id: id of user
        passwordNew: new password in MD5
        passwordAdmin: admin password in MD5
    */
    changePassword(id: String, passwordNew: string, passwordAdmin: string): Observable<void> {
        return this.http
            .post<void>(this.contextUrl + '/' + id + '/changePassword', {
                passwordNew: passwordNew,
                passwordAdmin: passwordAdmin
            })
            .pipe(
                map(response => response)
            );
    }
    {{/equal}}
}
